#MC Hammer Charts for simulation results

using Gadfly

function density_chrt(Data, x_label)
      if x_label ==""
            x_label="x"
      end
chart = plot(Data, x=Data, Guide.xlabel(x_label), Guide.ylabel("Frequency"), Geom.density)
describe(Data)
println("")
print("Mean: ", mean(ProjectNPV),"\n")
print("Std.Dev: ", std(ProjectNPV),"\n")
print("Prob. of Neg.: ", GetCertainty(ProjectNPV,0,0),"\n")
println("")
print("p10, p50, p90 : ", quantile(collect(Float64, ProjectNPV),[0.1,0.5,0.9]),"\n")
return chart
end

function histogram_chrt(Data, x_label)
      if x_label ==""
            x_label="x"
      end
chart = plot(Data, x=Data, Guide.xlabel(x_label), Guide.ylabel("Frequency"), Geom.histogram)
describe(Data)
println("")
print("Mean: ", mean(ProjectNPV),"\n")
print("Std.Dev: ", std(ProjectNPV),"\n")
print("Prob. of Neg.: ", GetCertainty(ProjectNPV,0,0),"\n")
println("")
print("p10, p50, p90 : ", quantile(collect(Float64, ProjectNPV),[0.1,0.5,0.9]),"\n")
return chart
end

#SENSITIVITY CHART (ArrayName = Sensitivity_Tbl; TargetCol=1; RankOrder=1)

function sensitivity_chrt(ArrayName, TargetCol, RankOrder)
cor_mat = []
M_Size = size(ArrayName,2)
if RankOrder == 1
      for i=TargetCol
      cor_vector = []
            for i2=1:M_Size
             cor_i = cor(tiedrank(ArrayName[i]),tiedrank(ArrayName[i2]));
             push!(cor_vector,cor_i)
             #print(cov_i)
            end
       push!(cor_mat,cor_vector)
      end
else
      for i=1:TargetCol
      cor_vector = []
            for i2=1:M_Size
             cor_i = cor(ArrayName[i], ArrayName[i2]);
             push!(cor_vector,cor_i)
             #print(cov_i)
      end
      push!(cor_mat,cor_vector)
      end
end

correl_vals = hcat(cor_mat...)

#This removes all entries of 1 (self)
#correl_vals = correl_vals[(correl_vals[:].!=1)]

#setup input names, next version will get variable names

ystr = names(ArrayName)
color_code = correl_vals .<0

impact=[]
for i in 1:size(correl_vals,1)
      if color_code[i] == true
            value="Negative"
      else
            value="Positive"
      end
      push!(impact, value)
end

#Contribution to Variance
cont_var = correl_vals .^2
cont_var = cont_var ./ (sum(cont_var)-1)

graph_tbl = DataFrame(hcat(ystr,correl_vals, abs.(correl_vals), cont_var, color_code, impact))
names!(graph_tbl, [:name, :correlation, :abs_cor, :cont_var, :color_code, :impact])
graph_tbl = graph_tbl[graph_tbl[:correlation].!=1,:]
#graph_tbl = vcat(graph_tbl, cont_var)


#This removes all entries of 1 (self) in DataTable
graph_tbl = graph_tbl[graph_tbl[:correlation].!=1,:]

#Sort
graph_tbl = sort(graph_tbl,3,rev=false)

println(graph_tbl)

return plot(graph_tbl, y=:name, x=:correlation, Guide.Title("Variables with Biggest Impact"), Guide.xlabel("Correlation Score"), Guide.ylabel("Input"), Geom.bar(orientation=:horizontal), Theme(bar_spacing=10pt), color=:impact, Scale.color_discrete_manual(colorant"red", colorant"deep sky blue"))

end

#TREND CHART
function trend_chrt(SimTimeArray, PeriodRange, quantiles)
#In order to stack vector entries, use the mapping function ****
AC_DF = vcat(map(x->x',SimTimeArray)...)
AC_DF = DataFrame(AC_DF)

trend_chart = []

for i = 1:size(AC_DF,2)
    push!(trend_chart, quantile!(AC_DF[i], quantiles))
end

#this allows us to join arrays generated by the quantile function
trend_chart = vcat(map(x->x',trend_chart)...)

#convert to time array to join dates and reconvert to DataFrame
trend_chart = TimeArray(PeriodRange, trend_chart)
trend_chart = DataFrame(trend_chart)

#Build Charts
names!(trend_chart, [:timestamp, :LowerBound, :p50, :UpperBound])
return plot(stack(trend_chart), y=:value, x=:timestamp, color=:variable, Geom.line)

end





#Error Bar Example

# x = sort(rand(10)); xmin = 0.9x; xmax = 1.1x;
# ystr = map(i -> string(i) * " as a string", 1:10)
# plot(y = ystr, x = ex, xmin = xmin, xmax = xmax, Geom.errorbar)
